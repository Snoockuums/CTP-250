/** Experimenting with function templates
  *     Function templates allow the compiler to create instances of a function 
  *			dependent upon the parameters supplied in the call!
  * @author Professor Gregory
  * @file GenericDataTypes.cpp
  */
  
#include <iostream>
#include <string>
using namespace std;

// function prototype - function uses a template for specifying the data type of the parameter and the return type  
template<class T>
T tripleIt(T);

int main()
{  
  cout << "Experimenting with function templates!\n\n";

  cout << "When I triple 2 I get " << tripleIt(2) << endl;
  cout << "When I triple 200 I get " << tripleIt(200) << endl;
  cout << "When I triple 20000 I get " << tripleIt(20000) << endl;
  cout << "When I triple 2.8 I get " << tripleIt(2.8) << endl;
  cout << "When I triple 20000.8 I get " << tripleIt(20000.8) << endl;
  
  return 0;             // Same as EXIT_SUCCESS
}

// Function(s) will be generated by the compiler as needed based upon calls
// Notice that this ONE template is used to generate a function for each numeric data
// passed as a parameter 
template<class T>
T tripleIt(T data)
{ 
   return data + data + data;
}
